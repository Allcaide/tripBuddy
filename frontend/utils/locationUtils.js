// Fun√ß√£o para extrair cidade e pa√≠s do address (sem APIs externas)
export const parseLocationFromAddress = (address) => {
  if (!address || typeof address !== "string") {
    return {
      city: "Unknown City",
      country: "Unknown Country",
      fullLocation: "Unknown Location",
    };
  }

  // Split por v√≠rgulas e remove espa√ßos
  const parts = address
    .split(",")
    .map((part) => part.trim())
    .filter((part) => part);

  if (parts.length >= 2) {
    // √öltimo elemento = Pa√≠s (USA, Portugal, etc.)
    const country = parts[parts.length - 1];

    // Para endere√ßos como "560 Jefferson St, Napa, CA 94559, USA"
    // Queremos o "Napa" (antepen√∫ltimo, ignorando c√≥digo postal)
    let city;

    if (parts.length >= 4) {
      // Se temos 4+ partes, a cidade geralmente √© a antepen√∫ltima
      // [rua, cidade, estado/c√≥digo, pa√≠s]
      city = parts[parts.length - 3];
    } else if (parts.length === 3) {
      // Se temos 3 partes: [rua, cidade, pa√≠s]
      city = parts[parts.length - 2];
    } else {
      // Se s√≥ temos 2 partes: [cidade, pa√≠s]
      city = parts[parts.length - 2];
    }

    const result = {
      city,
      country,
      fullLocation: `${city}, ${country}`,
    };

    return result;
  }

  // Se n√£o conseguimos fazer parsing
  console.log(`‚ùå N√£o foi poss√≠vel fazer parsing de: "${address}"`);
  return {
    city: "Unknown City",
    country: "Unknown Country",
    fullLocation: "Unknown Location",
  };
};

// Cache simples para addresses j√° processados
const addressCache = new Map();

export const parseLocationFromAddressWithCache = (address) => {
  if (!address) return parseLocationFromAddress(address);

  if (addressCache.has(address)) {
    return addressCache.get(address);
  }

  const location = parseLocationFromAddress(address);
  addressCache.set(address, location);

  return location;
};

// Fun√ß√£o para limpar cache
export const clearAddressCache = () => {
  addressCache.clear();
  console.log("üßπ Cache de addresses limpo");
};

// Manter as fun√ß√µes antigas comentadas para refer√™ncia se precisarmos
/*
// Fun√ß√£o principal para converter coordenadas - S√ì CIDADE E PA√çS
export const getCityCountryFromCoordinates = async (latitude, longitude) => {
  // ... c√≥digo antigo comentado
};

export const getCityCountryFromCoordinatesWithCache = async (
  latitude,
  longitude,
) => {
  // ... c√≥digo antigo comentado  
};
*/
